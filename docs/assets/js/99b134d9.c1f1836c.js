"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[185],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),d=i,b=u["".concat(s,".").concat(d)]||u[d]||c[d]||a;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<a;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5952:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:2},o="Build WASM",l={unversionedId:"c/build-wasm",id:"c/build-wasm",title:"Build WASM",description:"Build for Browsers",source:"@site/docs/c/build-wasm.md",sourceDirName:"c",slug:"/c/build-wasm",permalink:"/webassembly-examples-eratosthenes/c/build-wasm",draft:!1,editUrl:"https://github.com/t-katsumura/webassembly-examples-eratosthenes/tree/main/website/docs/docs/c/build-wasm.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Write Program",permalink:"/webassembly-examples-eratosthenes/c/write-program"},next:{title:"Run WASM",permalink:"/webassembly-examples-eratosthenes/c/run-wasm"}},s={},m=[{value:"Build for Browsers",id:"build-for-browsers",level:2},{value:"Build for Standalone",id:"build-for-standalone",level:2}],p={toc:m};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"build-wasm"},"Build WASM"),(0,i.kt)("h2",{id:"build-for-browsers"},"Build for Browsers"),(0,i.kt)("p",null,"Build WebAssembly from C code using ",(0,i.kt)("a",{parentName:"p",href:"https://emscripten.org/"},"Emscripten"),"."),(0,i.kt)("p",null,"This is the command to build WebAssembly from C codes for browsers.",(0,i.kt)("br",{parentName:"p"}),"\n","This command generates ",(0,i.kt)("inlineCode",{parentName:"p"},"prime.js")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"prime.wasm"),". We need both to run on browsers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="build for browsers"',title:'"build',for:!0,'browsers"':!0},"emcc src/prime.c -o prime.js -O3 -flto -sWASM=1 -sEXIT_RUNTIME=1 -sINVOKE_RUN=0 -sEXPORTED_FUNCTIONS=_prime -sMODULARIZE=1\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="build for browsers with more options"',title:'"build',for:!0,browsers:!0,with:!0,more:!0,'options"':!0},"emcc src/prime.c -o prime.js -O3 -flto -sWASM=1 -sEXIT_RUNTIME=1 -sINVOKE_RUN=0 -sEXPORTED_FUNCTIONS=_prime,_malloc -sINITIAL_MEMORY=32mb -sALLOW_MEMORY_GROWTH=1 -sMODULARIZE=1\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-O3")," : optimize from the standpoint of speed"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-flto")," : enable link time optimization"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-sWASM=1")," : compile targeting wasm"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-sEXIT_RUNTIME=1")," : do not exit wasm at the exit of the function because we want to read the memory of the wasm"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-sINVOKE_RUN=0")," : do not invoke ",(0,i.kt)("inlineCode",{parentName:"li"},"main()")," function on instantiation"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-sEXPORTED_FUNCTIONS=_prime,_malloc")," : make the functions available from javascript"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-sINITIAL_MEMORY=32mb")," : enlarge initialmemory size (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/emscripten-core/emscripten/blob/126f1716359ce73ba32fe66d65f9c4a5bf5ba0e8/src/settings.js#L167"},"default is 16 MB"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-sMODULARIZE=1")," : modularize javascript to enable reuse. if not set, module is initialize globally in the emitted javascript")),(0,i.kt)("p",null,"If optimization options is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"-O3")," or higher, function names will be broken. This is not the big problem when using the glue javascript code emitted by compiler.",(0,i.kt)("br",{parentName:"p"}),"\n","Other important options like ",(0,i.kt)("inlineCode",{parentName:"p"},"-sEXPORTED_RUNTIME_METHODS=ccall,cwrap")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"-sINVOKE_RUN=1")," can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://emscripten.org/docs/tools_reference/emcc.html"},"Emscripten Compiler Frontend (emcc)"),"."),(0,i.kt)("h2",{id:"build-for-standalone"},"Build for Standalone"),(0,i.kt)("p",null,"When building the program for standalone runtime, ",(0,i.kt)("inlineCode",{parentName:"p"},"-sSTANDALONE_WASM=1")," option is used.",(0,i.kt)("br",{parentName:"p"}),"\n","Because main function is not contained, ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-entry")," option is used here.\nWe need to tell the commands what function should be exported so that we can call them."),(0,i.kt)("p",null,"The following command generates only ",(0,i.kt)("inlineCode",{parentName:"p"},"prime_standalone.wasm"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="build for standalone"',title:'"build',for:!0,'standalone"':!0},"emcc src/prime.c -o prime_standalone.wasm -O3 -flto -sWASM=1 -sEXPORTED_FUNCTIONS=_prime -sSTANDALONE_WASM=1 --no-entry\n")),(0,i.kt)("p",null,"or, when using WAVM runtime "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="build for standalone WAVM runtime"',title:'"build',for:!0,standalone:!0,WAVM:!0,'runtime"':!0},"emcc src/print_prime.c src/prime.c -o print_prime_standalone.wasm -O3 -flto -sWASM=1 -sEXPORTED_FUNCTIONS=_prime,_print_prime -sSTANDALONE_WASM=1 --no-entry\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--no-entry")," : this is required when not setting ",(0,i.kt)("inlineCode",{parentName:"li"},"_main")," in the ",(0,i.kt)("inlineCode",{parentName:"li"},"EXPORTED_FUNCTIONS")," option")))}c.isMDXComponent=!0}}]);